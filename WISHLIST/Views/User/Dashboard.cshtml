@using WISHLIST.Models.DTO
@using WISHLIST.Models.Domain
@using WISHLIST.Repositories.Abstract
@model CombineDashboardViewModel
@inject IUserService _userService
@inject IWishlistService _wishlistService
@{
    var user = Model.User;
    var correctedPath = $"/images/{user.ImageFilePath}";
}

<style>
    .user-image {
        background: url('@Html.Raw(correctedPath)');
        background-repeat: no-repeat;
        border-radius: 7.5em;
        background-position: center center;
        background-size: cover;
        height: 15em;
        width: 15em;
        margin: 1em;
    }
</style>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<div class="dashboard-body">
    <div class="left-side">
        <div class="wishlists-side">
            @{
                if (User.Identity.Name == user.UserName)
                {
                    <h2 class="list-header">MY WISH LISTS</h2>
                }
                else
                {
                    <h2 class="list-header">@user.UserName's WISH LISTS</h2>
                }
            }
            <div class="wishlists">
                @{
                    foreach(var wishlist in Model.Wishlists)
                    {
                        if (wishlist.AuthorId == user.Id)
                        {
                            <div class="wishlist">
                                <a class="wishlist-link" href="~/Wishlist/UpdateWishlist?wishlistId=@wishlist.Id">
                                    @wishlist.Name
                                    <div class="wishlist-actions">
                                        <a class="delete-ref" href="javascript:void(0)" data-wishlist-id="@wishlist.Id"><i class="fa-solid fa-trash-can delete"></i></a>
                                    </div>
                                </a>
                            </div>
                        }
                        else
                        {
                            var author = await _userService.GetUserById(wishlist.AuthorId);
                            <div class="wishlist">
                                <a class="wishlist-link" href="~/Wishlist/Wishlist?wishlistId=@wishlist.Id&username=@author.UserName">
                                    @wishlist.Name
                                </a>
                            </div>
                        }
                    }
                }
            </div>
        </div>
        @{
            if (User.Identity.Name == user.UserName)
            {
                <div class="center-side">
                    <a class="add-button" href="~/Wishlist/CreateWishlist"><i class="fa-solid fa-xmark add-icon"></i></a>
                </div>
            }
        }

    </div>
    <div class="right-side">
        <div class="user-lines">
            <div class="line"><div class="user-image"></div></div>
            <div class="line">@user.UserName</div>
            <div class="line">@user.Surname @user.Name</div>
            <div class="line">
                <div class="interacion">Friends: @Model.FriendsCount</div>
                <div class="interacion">Blocked: @Model.BlockedUsersCount</div>
            </div>
            <div class="line">Wish Lists Count: @Model.WishlistsCount</div>
            <div class="line">Gifts Count: @Model.GiftsCount</div>
            @{
                if (User.Identity.Name != user.UserName)
                {
                    var interaction = await _userService.GetInteractionTypeAsync(User.Identity.Name, user.UserName);

                    if (interaction == null)
                    {
                        <a class="button" href="/User/MakeFriendRequest?user2name=@user.UserName">FOLLOW</a>
                        <a class="button" href="/User/BlockUser?user1name=@user.UserName">BLOCK</a>
                    }
                    else
                    {
                        var type = (InteractionType)interaction;

                        switch (type)
                        {
                            case InteractionType.Block2:
                                <a class="button" href="/User/UnblockUser?username=@user.UserName">UNBLOCK</a>
                                break;

                            case InteractionType.Friendship:
                                <a class="button" href="/User/DeleteFromFriends?username=@user.UserName">UNFOLLOW</a>
                                break;

                            case InteractionType.Request1:
                                <a class="button" href="#"><i class="fa-solid fa-user-clock"></i></a>
                                break;

                            case InteractionType.Request2:
                                <a class="button" href="/User/ConfirmFriend?user1name=@user.UserName"><i class="fa-solid fa-user-plus"></i></a>
                                break;
                        }
                    }
                }
            }
        </div>
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            $('.delete-ref').on('click', function () {
                var deleteRef = $(this); // Store a reference to the clicked element
                var wishlistId = deleteRef.data('wishlist-id');

                $.ajax({
                    url: '/Wishlist/DeleteWishlist',
                    type: 'DELETE',
                    data: { wishlistId: wishlistId },
                    success: function (data) {
                        // Handle success, if needed
                        console.log('Wishlist deleted successfully');

                        // Find the closest parent .wishlist and remove it
                        deleteRef.closest('.wishlist').remove();

                        // Reload the page
                        window.location.reload();
                    },
                    error: function (error) {
                        // Handle error, if needed
                        console.error('Error deleting wishlist:', error);
                    }
                });
            });
        });
    </script>
}